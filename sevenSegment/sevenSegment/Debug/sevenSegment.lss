
sevenSegment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000001e0  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a0c  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000877  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000375  00000000  00000000  00001583  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  000018f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000429  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d7  00000000  00000000  00001d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ee       	ldi	r30, 0xE0	; 224
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	59 d0       	rcall	.+178    	; 0x166 <main>
  b4:	93 c0       	rjmp	.+294    	; 0x1dc <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <segment>:
						0x7f, 0x6f, 0x77, 0x7c,
						0x39, 0x5e, 0x79, 0x71,
						0x08, 0x80};

void segment(int n)
{
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	fc 01       	movw	r30, r24
	
	unsigned char N1000, N100, N10, N1;
	int buf;
	
	N1000 = n / 1000; // digit 1000
  c2:	68 ee       	ldi	r22, 0xE8	; 232
  c4:	73 e0       	ldi	r23, 0x03	; 3
  c6:	63 d0       	rcall	.+198    	; 0x18e <__divmodhi4>
  c8:	8b 01       	movw	r16, r22
	buf = n % 1000;
	N100 = buf / 100; // digit 100
  ca:	24 e6       	ldi	r18, 0x64	; 100
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	b9 01       	movw	r22, r18
  d0:	5e d0       	rcall	.+188    	; 0x18e <__divmodhi4>
  d2:	eb 01       	movw	r28, r22
	buf = n % 100;
  d4:	cf 01       	movw	r24, r30
  d6:	b9 01       	movw	r22, r18
  d8:	5a d0       	rcall	.+180    	; 0x18e <__divmodhi4>
	N10 = buf / 10; // digit 10
	N1 = buf % 10; // digit 1
  da:	6a e0       	ldi	r22, 0x0A	; 10
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	57 d0       	rcall	.+174    	; 0x18e <__divmodhi4>
  e0:	20 e0       	ldi	r18, 0x00	; 0
	
	for(int i = 0; i < 250; i++){
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	38 c0       	rjmp	.+112    	; 0x156 <segment+0x9e>
  e6:	e5 e6       	ldi	r30, 0x65	; 101
		PORTG = 0x0e; // 0b0000 1110
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	4e e0       	ldi	r20, 0x0E	; 14
  ec:	40 83       	st	Z, r20
  ee:	d8 01       	movw	r26, r16
		PORTB = font[N1000];
  f0:	bb 27       	eor	r27, r27
  f2:	a0 50       	subi	r26, 0x00	; 0
  f4:	bf 4f       	sbci	r27, 0xFF	; 255
  f6:	4c 91       	ld	r20, X
  f8:	48 bb       	out	0x18, r20	; 24
  fa:	a6 e6       	ldi	r26, 0x66	; 102
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	be e0       	ldi	r27, 0x0E	; 14
  fe:	11 97       	sbiw	r26, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <segment+0x46>
 102:	00 00       	nop
 104:	4d e0       	ldi	r20, 0x0D	; 13
		_delay_ms(1);
		
		PORTG = 0x0d; // 1101
 106:	40 83       	st	Z, r20
 108:	de 01       	movw	r26, r28
		PORTB = font[N100];
 10a:	bb 27       	eor	r27, r27
 10c:	a0 50       	subi	r26, 0x00	; 0
 10e:	bf 4f       	sbci	r27, 0xFF	; 255
 110:	4c 91       	ld	r20, X
 112:	48 bb       	out	0x18, r20	; 24
 114:	a6 e6       	ldi	r26, 0x66	; 102
 116:	be e0       	ldi	r27, 0x0E	; 14
 118:	11 97       	sbiw	r26, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <segment+0x60>
 11c:	00 00       	nop
 11e:	4b e0       	ldi	r20, 0x0B	; 11
		_delay_ms(1);
		
		PORTG = 0x0b; // 1011
 120:	40 83       	st	Z, r20
 122:	db 01       	movw	r26, r22
		PORTB = font[N10];
 124:	bb 27       	eor	r27, r27
 126:	a0 50       	subi	r26, 0x00	; 0
 128:	bf 4f       	sbci	r27, 0xFF	; 255
 12a:	4c 91       	ld	r20, X
 12c:	48 bb       	out	0x18, r20	; 24
 12e:	a6 e6       	ldi	r26, 0x66	; 102
 130:	be e0       	ldi	r27, 0x0E	; 14
 132:	11 97       	sbiw	r26, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <segment+0x7a>
 136:	00 00       	nop
 138:	47 e0       	ldi	r20, 0x07	; 7
		_delay_ms(1);
		
		PORTG = 0x07; // 0111
 13a:	40 83       	st	Z, r20
 13c:	fc 01       	movw	r30, r24
		PORTB = font[N1];
 13e:	ff 27       	eor	r31, r31
 140:	e0 50       	subi	r30, 0x00	; 0
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	40 81       	ld	r20, Z
 146:	48 bb       	out	0x18, r20	; 24
 148:	e6 e6       	ldi	r30, 0x66	; 102
 14a:	fe e0       	ldi	r31, 0x0E	; 14
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <segment+0x94>
 150:	00 00       	nop
 152:	2f 5f       	subi	r18, 0xFF	; 255
	N100 = buf / 100; // digit 100
	buf = n % 100;
	N10 = buf / 10; // digit 10
	N1 = buf % 10; // digit 1
	
	for(int i = 0; i < 250; i++){
 154:	3f 4f       	sbci	r19, 0xFF	; 255
 156:	2a 3f       	cpi	r18, 0xFA	; 250
 158:	31 05       	cpc	r19, r1
 15a:	2c f2       	brlt	.-118    	; 0xe6 <segment+0x2e>
 15c:	df 91       	pop	r29
		
		PORTG = 0x07; // 0111
		PORTB = font[N1];
		_delay_ms(1);
	}
}
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	08 95       	ret

00000166 <main>:
 166:	8f ef       	ldi	r24, 0xFF	; 255

int main(void)
{
    /* Replace with your application code */
	DDRB = 0xff; // LED all output
 168:	87 bb       	out	0x17, r24	; 23
	DDRG = 0x0f; // FND 0~3 output
 16a:	8f e0       	ldi	r24, 0x0F	; 15
 16c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	PORTG = 0x00; // 0 : active
 170:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	
	//int num = 0;
	int count = 0;
 174:	c0 e0       	ldi	r28, 0x00	; 0
 176:	d0 e0       	ldi	r29, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <main+0x18>
    while (1) 
    {
		segment(count);
		count++;
		if(count == 9999) count = 0;
 17a:	c0 e0       	ldi	r28, 0x00	; 0
 17c:	d0 e0       	ldi	r29, 0x00	; 0
	
	//int num = 0;
	int count = 0;
    while (1) 
    {
		segment(count);
 17e:	ce 01       	movw	r24, r28
 180:	9b df       	rcall	.-202    	; 0xb8 <segment>
		count++;
 182:	21 96       	adiw	r28, 0x01	; 1
		if(count == 9999) count = 0;
 184:	cf 30       	cpi	r28, 0x0F	; 15
 186:	87 e2       	ldi	r24, 0x27	; 39
 188:	d8 07       	cpc	r29, r24
 18a:	c9 f7       	brne	.-14     	; 0x17e <main+0x18>
 18c:	f6 cf       	rjmp	.-20     	; 0x17a <main+0x14>

0000018e <__divmodhi4>:
 18e:	97 fb       	bst	r25, 7
 190:	07 2e       	mov	r0, r23
 192:	16 f4       	brtc	.+4      	; 0x198 <__divmodhi4+0xa>
 194:	00 94       	com	r0
 196:	06 d0       	rcall	.+12     	; 0x1a4 <__divmodhi4_neg1>
 198:	77 fd       	sbrc	r23, 7
 19a:	08 d0       	rcall	.+16     	; 0x1ac <__divmodhi4_neg2>
 19c:	0b d0       	rcall	.+22     	; 0x1b4 <__udivmodhi4>
 19e:	07 fc       	sbrc	r0, 7
 1a0:	05 d0       	rcall	.+10     	; 0x1ac <__divmodhi4_neg2>
 1a2:	3e f4       	brtc	.+14     	; 0x1b2 <__divmodhi4_exit>

000001a4 <__divmodhi4_neg1>:
 1a4:	90 95       	com	r25
 1a6:	81 95       	neg	r24
 1a8:	9f 4f       	sbci	r25, 0xFF	; 255
 1aa:	08 95       	ret

000001ac <__divmodhi4_neg2>:
 1ac:	70 95       	com	r23
 1ae:	61 95       	neg	r22
 1b0:	7f 4f       	sbci	r23, 0xFF	; 255

000001b2 <__divmodhi4_exit>:
 1b2:	08 95       	ret

000001b4 <__udivmodhi4>:
 1b4:	aa 1b       	sub	r26, r26
 1b6:	bb 1b       	sub	r27, r27
 1b8:	51 e1       	ldi	r21, 0x11	; 17
 1ba:	07 c0       	rjmp	.+14     	; 0x1ca <__udivmodhi4_ep>

000001bc <__udivmodhi4_loop>:
 1bc:	aa 1f       	adc	r26, r26
 1be:	bb 1f       	adc	r27, r27
 1c0:	a6 17       	cp	r26, r22
 1c2:	b7 07       	cpc	r27, r23
 1c4:	10 f0       	brcs	.+4      	; 0x1ca <__udivmodhi4_ep>
 1c6:	a6 1b       	sub	r26, r22
 1c8:	b7 0b       	sbc	r27, r23

000001ca <__udivmodhi4_ep>:
 1ca:	88 1f       	adc	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	5a 95       	dec	r21
 1d0:	a9 f7       	brne	.-22     	; 0x1bc <__udivmodhi4_loop>
 1d2:	80 95       	com	r24
 1d4:	90 95       	com	r25
 1d6:	bc 01       	movw	r22, r24
 1d8:	cd 01       	movw	r24, r26
 1da:	08 95       	ret

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
