
Timer_CTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000002ca  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800112  00800112  00000370  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a38  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000885  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d8  00000000  00000000  000016cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000438  00000000  00000000  00001b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cc  00000000  00000000  00001f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002220  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	ef c0       	rjmp	.+478    	; 0x204 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ec       	ldi	r30, 0xCA	; 202
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d4 d0       	rcall	.+424    	; 0x26c <main>
  c4:	00 c1       	rjmp	.+512    	; 0x2c6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <segment>:
uint16_t cnt = 0;
uint16_t cntSec = 0;


void segment(uint16_t n)
{
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	ac 01       	movw	r20, r24
	if(n > 9999) return;
  d2:	40 31       	cpi	r20, 0x10	; 16
  d4:	87 e2       	ldi	r24, 0x27	; 39
  d6:	58 07       	cpc	r21, r24
  d8:	08 f0       	brcs	.+2      	; 0xdc <segment+0x14>
  da:	8f c0       	rjmp	.+286    	; 0x1fa <segment+0x132>
	
	uint8_t n1000, n100, n10, n1;
	uint16_t buf;
	
	n1000 = n / 1000; // digit 1000
  dc:	fa 01       	movw	r30, r20
  de:	f6 95       	lsr	r31
  e0:	e7 95       	ror	r30
  e2:	f6 95       	lsr	r31
  e4:	e7 95       	ror	r30
  e6:	f6 95       	lsr	r31
  e8:	e7 95       	ror	r30
  ea:	9f 01       	movw	r18, r30
  ec:	a5 ec       	ldi	r26, 0xC5	; 197
  ee:	b0 e2       	ldi	r27, 0x20	; 32
  f0:	db d0       	rcall	.+438    	; 0x2a8 <__umulhisi3>
  f2:	ec 01       	movw	r28, r24
  f4:	d2 95       	swap	r29
  f6:	c2 95       	swap	r28
  f8:	cf 70       	andi	r28, 0x0F	; 15
  fa:	cd 27       	eor	r28, r29
  fc:	df 70       	andi	r29, 0x0F	; 15
  fe:	cd 27       	eor	r28, r29
	buf = n % 1000;
 100:	28 ee       	ldi	r18, 0xE8	; 232
 102:	33 e0       	ldi	r19, 0x03	; 3
 104:	c2 9f       	mul	r28, r18
 106:	c0 01       	movw	r24, r0
 108:	c3 9f       	mul	r28, r19
 10a:	90 0d       	add	r25, r0
 10c:	d2 9f       	mul	r29, r18
 10e:	90 0d       	add	r25, r0
 110:	11 24       	eor	r1, r1
 112:	9a 01       	movw	r18, r20
 114:	28 1b       	sub	r18, r24
 116:	39 0b       	sbc	r19, r25
	n100 = buf / 100; // digit 100
 118:	36 95       	lsr	r19
 11a:	27 95       	ror	r18
 11c:	36 95       	lsr	r19
 11e:	27 95       	ror	r18
 120:	ab e7       	ldi	r26, 0x7B	; 123
 122:	b4 e1       	ldi	r27, 0x14	; 20
 124:	c1 d0       	rcall	.+386    	; 0x2a8 <__umulhisi3>
 126:	8c 01       	movw	r16, r24
 128:	16 95       	lsr	r17
 12a:	07 95       	ror	r16
	buf = n % 100;
 12c:	9a 01       	movw	r18, r20
 12e:	36 95       	lsr	r19
 130:	27 95       	ror	r18
 132:	36 95       	lsr	r19
 134:	27 95       	ror	r18
 136:	b8 d0       	rcall	.+368    	; 0x2a8 <__umulhisi3>
 138:	fc 01       	movw	r30, r24
 13a:	f6 95       	lsr	r31
 13c:	e7 95       	ror	r30
 13e:	24 e6       	ldi	r18, 0x64	; 100
 140:	2e 9f       	mul	r18, r30
 142:	c0 01       	movw	r24, r0
 144:	2f 9f       	mul	r18, r31
 146:	90 0d       	add	r25, r0
 148:	11 24       	eor	r1, r1
 14a:	fa 01       	movw	r30, r20
 14c:	e8 1b       	sub	r30, r24
 14e:	f9 0b       	sbc	r31, r25
	n10 = buf / 10; // digit 10
 150:	9f 01       	movw	r18, r30
 152:	ad ec       	ldi	r26, 0xCD	; 205
 154:	bc ec       	ldi	r27, 0xCC	; 204
 156:	a8 d0       	rcall	.+336    	; 0x2a8 <__umulhisi3>
 158:	ac 01       	movw	r20, r24
 15a:	56 95       	lsr	r21
 15c:	47 95       	ror	r20
 15e:	56 95       	lsr	r21
 160:	47 95       	ror	r20
 162:	56 95       	lsr	r21
 164:	47 95       	ror	r20
	n1 = buf % 10; // digit 1
 166:	9a 01       	movw	r18, r20
 168:	22 0f       	add	r18, r18
 16a:	33 1f       	adc	r19, r19
 16c:	ca 01       	movw	r24, r20
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	82 0f       	add	r24, r18
 17c:	93 1f       	adc	r25, r19
 17e:	9f 01       	movw	r18, r30
 180:	28 1b       	sub	r18, r24
 182:	39 0b       	sbc	r19, r25
	
	for(int i = 0; i < 125; i++){
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	35 c0       	rjmp	.+106    	; 0x1f4 <segment+0x12c>
		PORTC = 0x0e; // 0b0000 1110
 18a:	6e e0       	ldi	r22, 0x0E	; 14
 18c:	65 bb       	out	0x15, r22	; 21
		PORTA = font[n1000];
 18e:	fe 01       	movw	r30, r28
 190:	ff 27       	eor	r31, r31
 192:	e0 50       	subi	r30, 0x00	; 0
 194:	ff 4f       	sbci	r31, 0xFF	; 255
 196:	60 81       	ld	r22, Z
 198:	6b bb       	out	0x1b, r22	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	e6 e6       	ldi	r30, 0x66	; 102
 19c:	fe e0       	ldi	r31, 0x0E	; 14
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <segment+0xd6>
 1a2:	00 00       	nop
		_delay_ms(1);
		
		PORTC = 0x0d; // 1101
 1a4:	6d e0       	ldi	r22, 0x0D	; 13
 1a6:	65 bb       	out	0x15, r22	; 21
		PORTA = font[n100];
 1a8:	f8 01       	movw	r30, r16
 1aa:	ff 27       	eor	r31, r31
 1ac:	e0 50       	subi	r30, 0x00	; 0
 1ae:	ff 4f       	sbci	r31, 0xFF	; 255
 1b0:	60 81       	ld	r22, Z
 1b2:	6b bb       	out	0x1b, r22	; 27
 1b4:	e6 e6       	ldi	r30, 0x66	; 102
 1b6:	fe e0       	ldi	r31, 0x0E	; 14
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <segment+0xf0>
 1bc:	00 00       	nop
		_delay_ms(1);
		
		PORTC = 0x0b; // 1011
 1be:	6b e0       	ldi	r22, 0x0B	; 11
 1c0:	65 bb       	out	0x15, r22	; 21
		PORTA = font[n10];
 1c2:	fa 01       	movw	r30, r20
 1c4:	ff 27       	eor	r31, r31
 1c6:	e0 50       	subi	r30, 0x00	; 0
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	60 81       	ld	r22, Z
 1cc:	6b bb       	out	0x1b, r22	; 27
 1ce:	e6 e6       	ldi	r30, 0x66	; 102
 1d0:	fe e0       	ldi	r31, 0x0E	; 14
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <segment+0x10a>
 1d6:	00 00       	nop
		_delay_ms(1);
		
		PORTC = 0x07; // 0111
 1d8:	67 e0       	ldi	r22, 0x07	; 7
 1da:	65 bb       	out	0x15, r22	; 21
		PORTA = font[n1];
 1dc:	f9 01       	movw	r30, r18
 1de:	ff 27       	eor	r31, r31
 1e0:	e0 50       	subi	r30, 0x00	; 0
 1e2:	ff 4f       	sbci	r31, 0xFF	; 255
 1e4:	60 81       	ld	r22, Z
 1e6:	6b bb       	out	0x1b, r22	; 27
 1e8:	e6 e6       	ldi	r30, 0x66	; 102
 1ea:	fe e0       	ldi	r31, 0x0E	; 14
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <segment+0x124>
 1f0:	00 00       	nop
	n100 = buf / 100; // digit 100
	buf = n % 100;
	n10 = buf / 10; // digit 10
	n1 = buf % 10; // digit 1
	
	for(int i = 0; i < 125; i++){
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	8d 37       	cpi	r24, 0x7D	; 125
 1f6:	91 05       	cpc	r25, r1
 1f8:	44 f2       	brlt	.-112    	; 0x18a <segment+0xc2>
		
		PORTC = 0x07; // 0111
		PORTA = font[n1];
		_delay_ms(1);
	}
}
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	08 95       	ret

00000204 <__vector_9>:

ISR(TIMER2_COMP_vect){
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	2f 93       	push	r18
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
	if(cntSec >= 99){
 214:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 218:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 21c:	83 36       	cpi	r24, 0x63	; 99
 21e:	91 05       	cpc	r25, r1
 220:	a0 f0       	brcs	.+40     	; 0x24a <__vector_9+0x46>
		cntSec = 0;
 222:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 226:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
		cnt++;
 22a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <cnt>
 22e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <cnt+0x1>
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <cnt+0x1>
 238:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <cnt>
		if(cnt > 9999) cnt = 0;
 23c:	80 31       	cpi	r24, 0x10	; 16
 23e:	97 42       	sbci	r25, 0x27	; 39
 240:	20 f0       	brcs	.+8      	; 0x24a <__vector_9+0x46>
 242:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <cnt+0x1>
 246:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <cnt>
	}
	cntSec++;
 24a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 24e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 258:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
}
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <main>:

int main(void)
{
	/* Timer 설정 */
	DDRB |= 0x80; // OC2[PB7] output mode
 26c:	87 b3       	in	r24, 0x17	; 23
 26e:	80 68       	ori	r24, 0x80	; 128
 270:	87 bb       	out	0x17, r24	; 23
	// 프리스케일러 1024 -> F_CPU/1024 = 14,400 -> T = 0.069444ms
	TCCR2 |= (1 << CS22 | 1 << CS20);
 272:	85 b5       	in	r24, 0x25	; 37
 274:	85 60       	ori	r24, 0x05	; 5
 276:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << WGM21); // CTC 모드
 278:	85 b5       	in	r24, 0x25	; 37
 27a:	88 60       	ori	r24, 0x08	; 8
 27c:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << COM20); // 매치시 토글
 27e:	85 b5       	in	r24, 0x25	; 37
 280:	80 61       	ori	r24, 0x10	; 16
 282:	85 bd       	out	0x25, r24	; 37
	
	OCR2 = 144; // 10ms 주기로 인터럽트 발생
 284:	80 e9       	ldi	r24, 0x90	; 144
 286:	83 bd       	out	0x23, r24	; 35
	
	/* FND 출력 설정 */
	DDRA |= 0xFF;
 288:	8a b3       	in	r24, 0x1a	; 26
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	8a bb       	out	0x1a, r24	; 26
	DDRC |= 0x0F;
 28e:	84 b3       	in	r24, 0x14	; 20
 290:	8f 60       	ori	r24, 0x0F	; 15
 292:	84 bb       	out	0x14, r24	; 20
	TIMSK |= (1 << OCIE2);
 294:	87 b7       	in	r24, 0x37	; 55
 296:	80 68       	ori	r24, 0x80	; 128
 298:	87 bf       	out	0x37, r24	; 55
	
	sei();
 29a:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
		segment(cnt);
 29c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <cnt>
 2a0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <cnt+0x1>
 2a4:	11 df       	rcall	.-478    	; 0xc8 <segment>
 2a6:	fa cf       	rjmp	.-12     	; 0x29c <main+0x30>

000002a8 <__umulhisi3>:
 2a8:	a2 9f       	mul	r26, r18
 2aa:	b0 01       	movw	r22, r0
 2ac:	b3 9f       	mul	r27, r19
 2ae:	c0 01       	movw	r24, r0
 2b0:	a3 9f       	mul	r26, r19
 2b2:	70 0d       	add	r23, r0
 2b4:	81 1d       	adc	r24, r1
 2b6:	11 24       	eor	r1, r1
 2b8:	91 1d       	adc	r25, r1
 2ba:	b2 9f       	mul	r27, r18
 2bc:	70 0d       	add	r23, r0
 2be:	81 1d       	adc	r24, r1
 2c0:	11 24       	eor	r1, r1
 2c2:	91 1d       	adc	r25, r1
 2c4:	08 95       	ret

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>
